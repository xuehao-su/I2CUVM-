class Master_data_buffer extends uvm_reg;

rand uvm_reg_field Data;

virtual function void build();

    Data=uvm_reg_field::type_id::create("Data");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    Data.configure(this,8,0,"RW",1,0,1,1,0);

endfunction

'uvm_object_utils(Master_data_buffer)

function new(input string name = "Master_data_buffer");
    //parameter name size has_coverage
    super.new(name,8,UVM_NO_COVERAGE);
endfunction

endclass

class Slave_data_buffer extends uvm_reg;

rand uvm_reg_field Data;

virtual function void build();

    Data=uvm_reg_field::type_id::create("Data");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    Data.configure(this,8,0,"RW",1,0,1,1,0);

endfunction

'uvm_object_utils(Slave_data_buffer)

function new(input string name = "Slave_data_buffer");
    //parameter name size has_coverage
    super.new(name,8,UVM_NO_COVERAGE);
endfunction

endclass

class Lo_Master_Address_Register extends uvm_reg;

rand uvm_reg_field 7_mode;

rand uvm_reg_field 10_mode_lo;

virtual function void build();

    7_mode=uvm_reg_field::type_id::create("7_mode");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    7_mode.configure(this,7,1,"RW",1,0,1,1,0);

    10_mode_lo=uvm_reg_field::type_id::create("10_mode_lo");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    10_mode_lo.configure(this,1,0,"RW",1,0,1,1,0);

endfunction

'uvm_object_utils(Lo_Master_Address_Register)

function new(input string name = "Lo_Master_Address_Register");
    //parameter name size has_coverage
    super.new(name,8,UVM_NO_COVERAGE);
endfunction

endclass

class Hi_Master_Address_Register extends uvm_reg;

rand uvm_reg_field fixed;

rand uvm_reg_field 10_mode_9_8;

rand uvm_reg_field careless;

virtual function void build();

    fixed=uvm_reg_field::type_id::create("fixed");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    fixed.configure(this,5,3,"RW",1,0,1,1,0);

    10_mode_9_8=uvm_reg_field::type_id::create("10_mode_9_8");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    10_mode_9_8.configure(this,2,1,"RW",1,0,1,1,0);

    careless=uvm_reg_field::type_id::create("careless");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    careless.configure(this,1,0,"RW",1,0,1,1,0);

endfunction

'uvm_object_utils(Hi_Master_Address_Register)

function new(input string name = "Hi_Master_Address_Register");
    //parameter name size has_coverage
    super.new(name,8,UVM_NO_COVERAGE);
endfunction

endclass

class Control_Register extends uvm_reg;

rand uvm_reg_field 7_B;

rand uvm_reg_field 6_B;

rand uvm_reg_field 5_B;

rand uvm_reg_field 4_B;

rand uvm_reg_field 3_B;

rand uvm_reg_field 2_B;

rand uvm_reg_field 1_B;

rand uvm_reg_field 0_B;

virtual function void build();

    7_B=uvm_reg_field::type_id::create("7_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    7_B.configure(this,1,7,"RW",1,0,1,1,0);

    6_B=uvm_reg_field::type_id::create("6_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    6_B.configure(this,1,6,"RW",1,0,1,1,0);

    5_B=uvm_reg_field::type_id::create("5_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    5_B.configure(this,1,5,"RW",1,0,1,1,0);

    4_B=uvm_reg_field::type_id::create("4_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    4_B.configure(this,1,4,"RW",1,0,1,1,0);

    3_B=uvm_reg_field::type_id::create("3_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    3_B.configure(this,1,3,"RW",1,0,1,1,0);

    2_B=uvm_reg_field::type_id::create("2_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    2_B.configure(this,1,2,"RW",1,0,1,1,0);

    1_B=uvm_reg_field::type_id::create("1_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    1_B.configure(this,1,1,"RW",1,0,1,1,0);

    0_B=uvm_reg_field::type_id::create("0_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    0_B.configure(this,1,0,"RW",1,0,1,1,0);

endfunction

'uvm_object_utils(Control_Register)

function new(input string name = "Control_Register");
    //parameter name size has_coverage
    super.new(name,8,UVM_NO_COVERAGE);
endfunction

endclass

class Mode_Control_Register extends uvm_reg;

rand uvm_reg_field 7_B;

rand uvm_reg_field 6_B;

rand uvm_reg_field 5_B;

rand uvm_reg_field 4_B;

rand uvm_reg_field 3_B;

rand uvm_reg_field 2_B;

rand uvm_reg_field 1_B;

rand uvm_reg_field 0_B;

virtual function void build();

    7_B=uvm_reg_field::type_id::create("7_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    7_B.configure(this,1,7,"RW",1,0,1,1,0);

    6_B=uvm_reg_field::type_id::create("6_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    6_B.configure(this,1,6,"RW",1,0,1,1,0);

    5_B=uvm_reg_field::type_id::create("5_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    5_B.configure(this,1,5,"RW",1,0,1,1,0);

    4_B=uvm_reg_field::type_id::create("4_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    4_B.configure(this,1,4,"RW",1,0,1,1,0);

    3_B=uvm_reg_field::type_id::create("3_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    3_B.configure(this,1,3,"RW",1,0,1,1,0);

    2_B=uvm_reg_field::type_id::create("2_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    2_B.configure(this,1,2,"RW",1,0,1,1,0);

    1_B=uvm_reg_field::type_id::create("1_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    1_B.configure(this,1,1,"RW",1,0,1,1,0);

    0_B=uvm_reg_field::type_id::create("0_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    0_B.configure(this,1,0,"RW",1,0,1,1,0);

endfunction

'uvm_object_utils(Mode_Control_Register)

function new(input string name = "Mode_Control_Register");
    //parameter name size has_coverage
    super.new(name,8,UVM_NO_COVERAGE);
endfunction

endclass

class Status_Register extends uvm_reg;

rand uvm_reg_field 7_B;

rand uvm_reg_field 6_B;

rand uvm_reg_field 5_B;

rand uvm_reg_field 4_B;

rand uvm_reg_field 3_B;

rand uvm_reg_field 2_B;

rand uvm_reg_field 1_B;

rand uvm_reg_field 0_B;

virtual function void build();

    7_B=uvm_reg_field::type_id::create("7_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    7_B.configure(this,1,7,"R",1,0,1,1,0);

    6_B=uvm_reg_field::type_id::create("6_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    6_B.configure(this,1,6,"R",1,0,1,1,0);

    5_B=uvm_reg_field::type_id::create("5_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    5_B.configure(this,1,5,"R",1,0,1,1,0);

    4_B=uvm_reg_field::type_id::create("4_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    4_B.configure(this,1,4,"R",1,0,1,1,0);

    3_B=uvm_reg_field::type_id::create("3_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    3_B.configure(this,1,3,"RW",1,0,1,1,0);

    2_B=uvm_reg_field::type_id::create("2_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    2_B.configure(this,1,2,"R",1,0,1,1,0);

    1_B=uvm_reg_field::type_id::create("1_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    1_B.configure(this,1,1,"RW",1,0,1,1,0);

    0_B=uvm_reg_field::type_id::create("0_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    0_B.configure(this,1,0,"R",1,0,1,1,0);

endfunction

'uvm_object_utils(Status_Register)

function new(input string name = "Status_Register");
    //parameter name size has_coverage
    super.new(name,8,UVM_NO_COVERAGE);
endfunction

endclass

class Extended_Status_Register extends uvm_reg;

rand uvm_reg_field 7_B;

rand uvm_reg_field 6_B;

rand uvm_reg_field 5_B;

rand uvm_reg_field 4_B;

rand uvm_reg_field 3_B;

rand uvm_reg_field 2_B;

rand uvm_reg_field 1_B;

rand uvm_reg_field 0_B;

virtual function void build();

    7_B=uvm_reg_field::type_id::create("7_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    7_B.configure(this,1,7,"RW",1,0,1,1,0);

    6_B=uvm_reg_field::type_id::create("6_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    6_B.configure(this,1,6,"R",1,0,1,1,0);

    5_B=uvm_reg_field::type_id::create("5_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    5_B.configure(this,1,5,"R",1,0,1,1,0);

    4_B=uvm_reg_field::type_id::create("4_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    4_B.configure(this,1,4,"R",1,0,1,1,0);

    3_B=uvm_reg_field::type_id::create("3_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    3_B.configure(this,1,3,"RW",1,0,1,1,0);

    2_B=uvm_reg_field::type_id::create("2_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    2_B.configure(this,1,2,"RW",1,0,1,1,0);

    1_B=uvm_reg_field::type_id::create("1_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    1_B.configure(this,1,1,"RW",1,0,1,1,0);

    0_B=uvm_reg_field::type_id::create("0_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    0_B.configure(this,1,0,"RW",1,0,1,1,0);

endfunction

'uvm_object_utils(Extended_Status_Register)

function new(input string name = "Extended_Status_Register");
    //parameter name size has_coverage
    super.new(name,8,UVM_NO_COVERAGE);
endfunction

endclass

class Lo_Slave_Address_Register extends uvm_reg;

rand uvm_reg_field 7_B;

rand uvm_reg_field 6_B;

rand uvm_reg_field 5_B;

rand uvm_reg_field 4_B;

rand uvm_reg_field 3_B;

rand uvm_reg_field 2_B;

rand uvm_reg_field 1_B;

rand uvm_reg_field 0_B;

virtual function void build();

    7_B=uvm_reg_field::type_id::create("7_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    7_B.configure(this,1,7,"RW",1,0,1,1,0);

    6_B=uvm_reg_field::type_id::create("6_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    6_B.configure(this,1,6,"RW",1,0,1,1,0);

    5_B=uvm_reg_field::type_id::create("5_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    5_B.configure(this,1,5,"RW",1,0,1,1,0);

    4_B=uvm_reg_field::type_id::create("4_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    4_B.configure(this,1,4,"RW",1,0,1,1,0);

    3_B=uvm_reg_field::type_id::create("3_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    3_B.configure(this,1,3,"RW",1,0,1,1,0);

    2_B=uvm_reg_field::type_id::create("2_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    2_B.configure(this,1,2,"RW",1,0,1,1,0);

    1_B=uvm_reg_field::type_id::create("1_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    1_B.configure(this,1,1,"RW",1,0,1,1,0);

    0_B=uvm_reg_field::type_id::create("0_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    0_B.configure(this,1,0,"RW",1,0,1,1,0);

endfunction

'uvm_object_utils(Lo_Slave_Address_Register)

function new(input string name = "Lo_Slave_Address_Register");
    //parameter name size has_coverage
    super.new(name,8,UVM_NO_COVERAGE);
endfunction

endclass

class Hi_Slave_Address_Register extends uvm_reg;

rand uvm_reg_field 7_B;

rand uvm_reg_field 6_B;

rand uvm_reg_field 5_B;

rand uvm_reg_field 4_B;

rand uvm_reg_field 3_B;

rand uvm_reg_field 2_B;

rand uvm_reg_field 1_B;

rand uvm_reg_field 0_B;

virtual function void build();

    7_B=uvm_reg_field::type_id::create("7_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    7_B.configure(this,1,7,"RW",1,0,1,1,0);

    6_B=uvm_reg_field::type_id::create("6_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    6_B.configure(this,1,6,"RW",1,0,1,1,0);

    5_B=uvm_reg_field::type_id::create("5_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    5_B.configure(this,1,5,"RW",1,0,1,1,0);

    4_B=uvm_reg_field::type_id::create("4_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    4_B.configure(this,1,4,"RW",1,0,1,1,0);

    3_B=uvm_reg_field::type_id::create("3_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    3_B.configure(this,1,3,"RW",1,0,1,1,0);

    2_B=uvm_reg_field::type_id::create("2_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    2_B.configure(this,1,2,"RW",1,0,1,1,0);

    1_B=uvm_reg_field::type_id::create("1_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    1_B.configure(this,1,1,"RW",1,0,1,1,0);

    0_B=uvm_reg_field::type_id::create("0_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    0_B.configure(this,1,0,"RW",1,0,1,1,0);

endfunction

'uvm_object_utils(Hi_Slave_Address_Register)

function new(input string name = "Hi_Slave_Address_Register");
    //parameter name size has_coverage
    super.new(name,8,UVM_NO_COVERAGE);
endfunction

endclass

class Clock_Divide_Register extends uvm_reg;

rand uvm_reg_field 7_B;

rand uvm_reg_field 6_B;

rand uvm_reg_field 5_B;

rand uvm_reg_field 4_B;

rand uvm_reg_field 3_B;

rand uvm_reg_field 2_B;

rand uvm_reg_field 1_B;

rand uvm_reg_field 0_B;

virtual function void build();

    7_B=uvm_reg_field::type_id::create("7_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    7_B.configure(this,1,7,"RW",1,0,1,1,0);

    6_B=uvm_reg_field::type_id::create("6_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    6_B.configure(this,1,6,"RW",1,0,1,1,0);

    5_B=uvm_reg_field::type_id::create("5_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    5_B.configure(this,1,5,"RW",1,0,1,1,0);

    4_B=uvm_reg_field::type_id::create("4_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    4_B.configure(this,1,4,"RW",1,0,1,1,0);

    3_B=uvm_reg_field::type_id::create("3_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    3_B.configure(this,1,3,"RW",1,0,1,1,0);

    2_B=uvm_reg_field::type_id::create("2_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    2_B.configure(this,1,2,"RW",1,0,1,1,0);

    1_B=uvm_reg_field::type_id::create("1_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    1_B.configure(this,1,1,"RW",1,0,1,1,0);

    0_B=uvm_reg_field::type_id::create("0_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    0_B.configure(this,1,0,"RW",1,0,1,1,0);

endfunction

'uvm_object_utils(Clock_Divide_Register)

function new(input string name = "Clock_Divide_Register");
    //parameter name size has_coverage
    super.new(name,8,UVM_NO_COVERAGE);
endfunction

endclass

class Interrupt_Enable_Register extends uvm_reg;

rand uvm_reg_field 7_B;

rand uvm_reg_field 6_B;

rand uvm_reg_field 5_B;

rand uvm_reg_field 4_B;

rand uvm_reg_field 3_B;

rand uvm_reg_field 2_B;

rand uvm_reg_field 1_B;

rand uvm_reg_field 0_B;

virtual function void build();

    7_B=uvm_reg_field::type_id::create("7_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    7_B.configure(this,1,7,"RW",1,0,1,1,0);

    6_B=uvm_reg_field::type_id::create("6_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    6_B.configure(this,1,6,"RW",1,0,1,1,0);

    5_B=uvm_reg_field::type_id::create("5_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    5_B.configure(this,1,5,"RW",1,0,1,1,0);

    4_B=uvm_reg_field::type_id::create("4_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    4_B.configure(this,1,4,"RW",1,0,1,1,0);

    3_B=uvm_reg_field::type_id::create("3_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    3_B.configure(this,1,3,"RW",1,0,1,1,0);

    2_B=uvm_reg_field::type_id::create("2_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    2_B.configure(this,1,2,"RW",1,0,1,1,0);

    1_B=uvm_reg_field::type_id::create("1_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    1_B.configure(this,1,1,"RW",1,0,1,1,0);

    0_B=uvm_reg_field::type_id::create("0_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    0_B.configure(this,1,0,"RW",1,0,1,1,0);

endfunction

'uvm_object_utils(Interrupt_Enable_Register)

function new(input string name = "Interrupt_Enable_Register");
    //parameter name size has_coverage
    super.new(name,8,UVM_NO_COVERAGE);
endfunction

endclass

class Transfer_Count_Register extends uvm_reg;

rand uvm_reg_field 7_B;

rand uvm_reg_field 6_B;

rand uvm_reg_field 5_B;

rand uvm_reg_field 4_B;

rand uvm_reg_field 3_B;

rand uvm_reg_field 2_B;

rand uvm_reg_field 1_B;

rand uvm_reg_field 0_B;

virtual function void build();

    7_B=uvm_reg_field::type_id::create("7_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    7_B.configure(this,1,7,"RW",1,0,1,1,0);

    6_B=uvm_reg_field::type_id::create("6_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    6_B.configure(this,1,6,"RW",1,0,1,1,0);

    5_B=uvm_reg_field::type_id::create("5_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    5_B.configure(this,1,5,"RW",1,0,1,1,0);

    4_B=uvm_reg_field::type_id::create("4_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    4_B.configure(this,1,4,"RW",1,0,1,1,0);

    3_B=uvm_reg_field::type_id::create("3_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    3_B.configure(this,1,3,"RW",1,0,1,1,0);

    2_B=uvm_reg_field::type_id::create("2_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    2_B.configure(this,1,2,"RW",1,0,1,1,0);

    1_B=uvm_reg_field::type_id::create("1_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    1_B.configure(this,1,1,"RW",1,0,1,1,0);

    0_B=uvm_reg_field::type_id::create("0_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    0_B.configure(this,1,0,"RW",1,0,1,1,0);

endfunction

'uvm_object_utils(Transfer_Count_Register)

function new(input string name = "Transfer_Count_Register");
    //parameter name size has_coverage
    super.new(name,8,UVM_NO_COVERAGE);
endfunction

endclass

class Extended_Control_and_Slave_Status_Register extends uvm_reg;

rand uvm_reg_field 7_B;

rand uvm_reg_field 6_B;

rand uvm_reg_field 5_B;

rand uvm_reg_field 4_B;

rand uvm_reg_field 3_B;

rand uvm_reg_field 2_B;

rand uvm_reg_field 1_B;

rand uvm_reg_field 0_B;

virtual function void build();

    7_B=uvm_reg_field::type_id::create("7_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    7_B.configure(this,1,7,"RW",1,0,1,1,0);

    6_B=uvm_reg_field::type_id::create("6_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    6_B.configure(this,1,6,"RW",1,0,1,1,0);

    5_B=uvm_reg_field::type_id::create("5_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    5_B.configure(this,1,5,"RW",1,0,1,1,0);

    4_B=uvm_reg_field::type_id::create("4_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    4_B.configure(this,1,4,"RW",1,0,1,1,0);

    3_B=uvm_reg_field::type_id::create("3_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    3_B.configure(this,1,3,"R",1,0,1,1,0);

    2_B=uvm_reg_field::type_id::create("2_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    2_B.configure(this,1,2,"R",1,0,1,1,0);

    1_B=uvm_reg_field::type_id::create("1_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    1_B.configure(this,1,1,"RW",1,0,1,1,0);

    0_B=uvm_reg_field::type_id::create("0_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    0_B.configure(this,1,0,"RW",1,0,1,1,0);

endfunction

'uvm_object_utils(Extended_Control_and_Slave_Status_Register)

function new(input string name = "Extended_Control_and_Slave_Status_Register");
    //parameter name size has_coverage
    super.new(name,8,UVM_NO_COVERAGE);
endfunction

endclass

class Direct_Control_Register extends uvm_reg;

rand uvm_reg_field 7_B;

rand uvm_reg_field 6_B;

rand uvm_reg_field 5_B;

rand uvm_reg_field 4_B;

rand uvm_reg_field 3_B;

rand uvm_reg_field 2_B;

rand uvm_reg_field 1_B;

rand uvm_reg_field 0_B;

virtual function void build();

    7_B=uvm_reg_field::type_id::create("7_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    7_B.configure(this,1,7,"RW",1,0,1,1,0);

    6_B=uvm_reg_field::type_id::create("6_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    6_B.configure(this,1,6,"RW",1,0,1,1,0);

    5_B=uvm_reg_field::type_id::create("5_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    5_B.configure(this,1,5,"RW",1,0,1,1,0);

    4_B=uvm_reg_field::type_id::create("4_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    4_B.configure(this,1,4,"RW",1,0,1,1,0);

    3_B=uvm_reg_field::type_id::create("3_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    3_B.configure(this,1,3,"RW",1,0,1,1,0);

    2_B=uvm_reg_field::type_id::create("2_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    2_B.configure(this,1,2,"RW",1,0,1,1,0);

    1_B=uvm_reg_field::type_id::create("1_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    1_B.configure(this,1,1,"RW",1,0,1,1,0);

    0_B=uvm_reg_field::type_id::create("0_B");
    //parameter: parent, size, lsb_pos, access, volatile, reset value, has_reset, is_rand, individually accessible
    0_B.configure(this,1,0,"RW",1,0,1,1,0);

endfunction

'uvm_object_utils(Direct_Control_Register)

function new(input string name = "Direct_Control_Register");
    //parameter name size has_coverage
    super.new(name,8,UVM_NO_COVERAGE);
endfunction

endclass

class reg_model extends uvm_reg_block;
rand Master_data_buffer Master_data_buffer_ins;
rand Slave_data_buffer Slave_data_buffer_ins;
rand Lo_Master_Address_Register Lo_Master_Address_Register_ins;
rand Hi_Master_Address_Register Hi_Master_Address_Register_ins;
rand Control_Register Control_Register_ins;
rand Mode_Control_Register Mode_Control_Register_ins;
rand Status_Register Status_Register_ins;
rand Extended_Status_Register Extended_Status_Register_ins;
rand Lo_Slave_Address_Register Lo_Slave_Address_Register_ins;
rand Hi_Slave_Address_Register Hi_Slave_Address_Register_ins;
rand Clock_Divide_Register Clock_Divide_Register_ins;
rand Interrupt_Enable_Register Interrupt_Enable_Register_ins;
rand Transfer_Count_Register Transfer_Count_Register_ins;
rand Extended_Control_and_Slave_Status_Register Extended_Control_and_Slave_Status_Register_ins;
rand Direct_Control_Register Direct_Control_Register_ins;
rand Interrupt_Register Interrupt_Register_ins;

virtual function void build();

    default_map = create_map("default_map",0,4,UVM_BIG_ENDIAN,0);

    Master_data_buffer_ins=Master_data_buffer::type_id::create("Master_data_buffer_ins");
    Master_data_buffer_ins.configure(this,"");
    Master_data_buffer_ins.build();
    Master_data_buffer_ins.lock_model();
    default_map.add_submap(Master_data_buffer_ins.default_map, 'h0);

    Slave_data_buffer_ins=Slave_data_buffer::type_id::create("Slave_data_buffer_ins");
    Slave_data_buffer_ins.configure(this,"");
    Slave_data_buffer_ins.build();
    Slave_data_buffer_ins.lock_model();
    default_map.add_submap(Slave_data_buffer_ins.default_map, 'h2);

    Lo_Master_Address_Register_ins=Lo_Master_Address_Register::type_id::create("Lo_Master_Address_Register_ins");
    Lo_Master_Address_Register_ins.configure(this,"");
    Lo_Master_Address_Register_ins.build();
    Lo_Master_Address_Register_ins.lock_model();
    default_map.add_submap(Lo_Master_Address_Register_ins.default_map, 'h4);

    Hi_Master_Address_Register_ins=Hi_Master_Address_Register::type_id::create("Hi_Master_Address_Register_ins");
    Hi_Master_Address_Register_ins.configure(this,"");
    Hi_Master_Address_Register_ins.build();
    Hi_Master_Address_Register_ins.lock_model();
    default_map.add_submap(Hi_Master_Address_Register_ins.default_map, 'h5);

    Control_Register_ins=Control_Register::type_id::create("Control_Register_ins");
    Control_Register_ins.configure(this,"");
    Control_Register_ins.build();
    Control_Register_ins.lock_model();
    default_map.add_submap(Control_Register_ins.default_map, 'h6);

    Mode_Control_Register_ins=Mode_Control_Register::type_id::create("Mode_Control_Register_ins");
    Mode_Control_Register_ins.configure(this,"");
    Mode_Control_Register_ins.build();
    Mode_Control_Register_ins.lock_model();
    default_map.add_submap(Mode_Control_Register_ins.default_map, 'h7);

    Status_Register_ins=Status_Register::type_id::create("Status_Register_ins");
    Status_Register_ins.configure(this,"");
    Status_Register_ins.build();
    Status_Register_ins.lock_model();
    default_map.add_submap(Status_Register_ins.default_map, 'h8);

    Extended_Status_Register_ins=Extended_Status_Register::type_id::create("Extended_Status_Register_ins");
    Extended_Status_Register_ins.configure(this,"");
    Extended_Status_Register_ins.build();
    Extended_Status_Register_ins.lock_model();
    default_map.add_submap(Extended_Status_Register_ins.default_map, 'h9);

    Lo_Slave_Address_Register_ins=Lo_Slave_Address_Register::type_id::create("Lo_Slave_Address_Register_ins");
    Lo_Slave_Address_Register_ins.configure(this,"");
    Lo_Slave_Address_Register_ins.build();
    Lo_Slave_Address_Register_ins.lock_model();
    default_map.add_submap(Lo_Slave_Address_Register_ins.default_map, 'ha);

    Hi_Slave_Address_Register_ins=Hi_Slave_Address_Register::type_id::create("Hi_Slave_Address_Register_ins");
    Hi_Slave_Address_Register_ins.configure(this,"");
    Hi_Slave_Address_Register_ins.build();
    Hi_Slave_Address_Register_ins.lock_model();
    default_map.add_submap(Hi_Slave_Address_Register_ins.default_map, 'hb);

    Clock_Divide_Register_ins=Clock_Divide_Register::type_id::create("Clock_Divide_Register_ins");
    Clock_Divide_Register_ins.configure(this,"");
    Clock_Divide_Register_ins.build();
    Clock_Divide_Register_ins.lock_model();
    default_map.add_submap(Clock_Divide_Register_ins.default_map, 'hc);

    Interrupt_Enable_Register_ins=Interrupt_Enable_Register::type_id::create("Interrupt_Enable_Register_ins");
    Interrupt_Enable_Register_ins.configure(this,"");
    Interrupt_Enable_Register_ins.build();
    Interrupt_Enable_Register_ins.lock_model();
    default_map.add_submap(Interrupt_Enable_Register_ins.default_map, 'hd);

    Transfer_Count_Register_ins=Transfer_Count_Register::type_id::create("Transfer_Count_Register_ins");
    Transfer_Count_Register_ins.configure(this,"");
    Transfer_Count_Register_ins.build();
    Transfer_Count_Register_ins.lock_model();
    default_map.add_submap(Transfer_Count_Register_ins.default_map, 'he);

    Extended_Control_and_Slave_Status_Register_ins=Extended_Control_and_Slave_Status_Register::type_id::create("Extended_Control_and_Slave_Status_Register_ins");
    Extended_Control_and_Slave_Status_Register_ins.configure(this,"");
    Extended_Control_and_Slave_Status_Register_ins.build();
    Extended_Control_and_Slave_Status_Register_ins.lock_model();
    default_map.add_submap(Extended_Control_and_Slave_Status_Register_ins.default_map, 'hf);

    Direct_Control_Register_ins=Direct_Control_Register::type_id::create("Direct_Control_Register_ins");
    Direct_Control_Register_ins.configure(this,"");
    Direct_Control_Register_ins.build();
    Direct_Control_Register_ins.lock_model();
    default_map.add_submap(Direct_Control_Register_ins.default_map, 'h10);

    Interrupt_Register_ins=Interrupt_Register::type_id::create("Interrupt_Register_ins");
    Interrupt_Register_ins.configure(this,"");
    Interrupt_Register_ins.build();
    Interrupt_Register_ins.lock_model();
    default_map.add_submap(Interrupt_Register_ins.default_map, 'h11);


endfunction

'uvm_object_utils(reg_model)

function new(input string name="reg_model");
    super.new(name,UVM_NO_COVERAGE);
endfunction

endclass